AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:

  StateMachineName:
    Description: Name of State Machine
    Type: String
    Default: MLOpsStepFunction
    
  S3MlopsBucket:
    Description: Bucket to store model and data
    Type: String
    Default: mlops-project-lab-us-east-1


Resources:

  SNSManualApprovalEmail:
    Type: AWS::SNS::Topic
    Properties:       
      TopicName: SNSManualApprovalEmail 
        
  HttpAPI:
    Type: AWS::Serverless::HttpApi
    Properties:      
      StageName: v1      

  MLOpsStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub ${StateMachineName}-${AWS::AccountId}
      DefinitionUri: ./statemachine/mlops.asl.json
      DefinitionSubstitutions:
        EmailLinkFunctionName: !Ref EmailLinkFunction
        UpdateSagemakerEndpointAPI: !GetAtt UpdateSagemakerEndpointAPI.Arn
        SagemakerRoleArn: !GetAtt SageMakerRole.Arn
        S3MlopsBucket: !Ref S3MlopsBucket
      Role: !GetAtt StepFunctionsRole.Arn

  FeatureStoreFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../scripts/functions/api_feature_store_endpoint
      Handler: app.lambda_handler
      Runtime: python3.8
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - sagemaker:InvokeEndpoint
              Resource: '*'         
      Events:
        ExplicitApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpAPI
            Method: POST
            Path: /invokeFeatureStore
      Environment:
        Variables:
          FeatureGroup: mlops_credit_cards_risk


  EmailLinkFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../scripts/functions/create_email_manual_approval
      Handler: app.lambda_handler
      Runtime: python3.8
      Policies:
      - SNSPublishMessagePolicy:
          TopicName: SNSManualApprovalEmail      
      Environment:
        Variables:
          HttpApiID: !Ref HttpAPI
          SNSArn: !Ref SNSManualApprovalEmail

  UpdateSagemakerEndpointAPI:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ../scripts/functions/update_sagemakerEndpoint_API
      Handler: app.lambda_handler
      Runtime: python3.8
      Timeout: 600
      Policies:
      - SNSPublishMessagePolicy:
          TopicName: SNSManualApprovalEmail
      - Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - lambda:UpdateFunctionConfiguration
            Resource: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${TestSagemakerEndpoint}
      - Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sagemaker:DescribeEndpoint
            Resource: '*'  
      Environment:
        Variables:
          Endpoint_FunctionName: !Ref TestSagemakerEndpoint
          HttpApiID: !Ref HttpAPI
          SNSArn: !Ref SNSManualApprovalEmail    

  RespondEmailLinks:    
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ../scripts/functions/response_to_model_approval/
      Handler: app.lambda_handler
      Runtime: python3.8
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - states:DescribeActivity
            - states:DeleteActivity
            - states:GetActivityTask
            - states:SendTaskSuccess
            - states:SendTaskFailure
            - states:SendTaskHeartbeat          
          Resource: !Sub "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${StateMachineName}-${AWS::AccountId}"         
      Events:
        ExplicitApi: 
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpAPI
            Method: GET
            Path: /respond



  TestSagemakerEndpoint:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ..scripts/functions/api_feature_store_endpoint
      Handler: app.lambda_handler
      Runtime: python3.8
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - sagemaker:InvokeEndpoint
              Resource: '*'         
      Events:
        ExplicitApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpAPI
            Method: POST
            Path: /invokeSagemakerAPI


            
  SageMakerRole:
      Type: AWS::IAM::Role
      Properties:       
        AssumeRolePolicyDocument: 
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - sagemaker.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Description: String
        ManagedPolicyArns:
          - !Ref SagemakerPolicy    
        Path: /      
  SagemakerPolicy:
      Type: 'AWS::IAM::ManagedPolicy'
      Properties:
        Description: Step function use policy
        PolicyDocument: !Sub
            - |-
              {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                              "Effect": "Allow",
                              "Action": [
                                  "cloudwatch:PutMetricData",                                  
                                  "logs:CreateLogGroup",
                                  "logs:CreateLogStream",
                                  "logs:DescribeLogStreams",
                                  "logs:PutLogEvents",
                                  "logs:GetLogEvents",                                                                                             
                                  "sagemaker:*"                                                             
                              ],
                              "Resource": [
                                  "*"
                              ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "iam:PassRole"
                            ],
                            "Resource": "*",
                            "Condition": {
                                "StringEquals": {
                                    "iam:PassedToService": "sagemaker.amazonaws.com"
                                }
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ecr:GetAuthorizationToken",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:BatchGetImage"
                            ],
                            "Resource": ["*"]
                        },                        
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:ListBucket",
                                "s3:GetObject",
                                "s3:PutObject",
                                "s3:DeleteObject"
                            ],
                            "Resource": [
                                "arn:aws:s3:::${S3MlopsBucket}",
                                "arn:aws:s3:::${S3MlopsBucket}/*"
                            ]
                        }
                      ]
              }
            - {
                AccountID: !Ref AWS::AccountId, 
                Region: !Ref AWS::Region,
                S3MlopsBucket: !Ref S3MlopsBucket  
              } 
  StepFunctionsRole:
      Type: AWS::IAM::Role
      Properties:       
        AssumeRolePolicyDocument: 
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - states.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Description: String
        ManagedPolicyArns:
          - !Ref StepFunctionsPolicy    
        Path: /      
  StepFunctionsPolicy:
      Type: 'AWS::IAM::ManagedPolicy'
      DependsOn: SageMakerRole
      Properties:
        Description: Step function use policy
        PolicyDocument: !Sub
            - |-
              {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                              "Effect": "Allow",
                              "Action": [
                                  "lambda:InvokeFunction",                                  
                                  "states:StartExecution"                                                                 
                              ],
                              "Resource": [
                                  "*"
                              ]
                          },                          
                          {
                            "Effect": "Allow",
                            "Action": [
                              "sagemaker:CreateTrainingJob",
                              "sagemaker:DescribeTrainingJob",
                              "sagemaker:StopTrainingJob",
                              "sagemaker:CreateModel",
                              "sagemaker:CreateTransformJob",
                              "sagemaker:CreateEndpointConfig",
                              "sagemaker:CreateEndpoint"
                            ],
                            "Resource": [
                              "arn:aws:sagemaker:${Region}:${AccountID}:training-job/*",
                              "arn:aws:sagemaker:${Region}:${AccountID}:model/*",
                              "arn:aws:sagemaker:${Region}:${AccountID}:transform-job/*",
                              "arn:aws:sagemaker:${Region}:${AccountID}:endpoint-config/*",
                              "arn:aws:sagemaker:${Region}:${AccountID}:endpoint/*"
                            ]
                          },
                          {
                            "Effect": "Allow",
                            "Action": [
                              "sagemaker:ListTags"
                            ],
                            "Resource": [
                              "*"
                            ]
                          },
                          {
                            "Effect": "Allow",
                            "Action": [
                              "iam:PassRole"
                            ],
                            "Resource": [
                              "${SageMakerRole}"
                            ],
                            "Condition": {
                              "StringEquals": {
                                "iam:PassedToService": "sagemaker.amazonaws.com"
                              }
                            }
                          },
                          {
                            "Effect": "Allow",
                            "Action": [
                              "events:PutTargets",
                              "events:PutRule",
                              "events:DescribeRule"
                            ],
                            "Resource": [
                              "arn:aws:events:${Region}:${AccountID}:rule/StepFunctionsGetEventsForSageMakerTrainingJobsRule",
                              "arn:aws:events:${Region}:${AccountID}:rule/StepFunctionsGetEventsForSageMakerTransformJobsRule"
                            ]
                          }  
                      ]
                }
            - {
                AccountID: !Ref AWS::AccountId, 
                Region: !Ref AWS::Region,
                SageMakerRole: !GetAtt SageMakerRole.Arn
                
              }
Outputs:
  MLOpsStateMachineArn:
    Description: "State machine ARN"
    Value: !Ref MLOpsStateMachine
  SNSManualApprovalEmail:
    Description: "SNS ARN"
    Value: !Ref SNSManualApprovalEmail

  
